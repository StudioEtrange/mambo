version: '2.4'

networks:
  default:

volumes:
  media:
  data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}
  download:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}
  scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/scripts
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/letsencrypt
  vault:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}/vault
  web_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/web
  newsletter_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/web/newsletter
  organizr2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/organizr2
  plex_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/plex
  # calibreweb_books_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_DATA_PATH}/calibreweb_books
  # calibreweb_books_media:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_books
  # calibreweb_comics_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_DATA_PATH}/calibreweb_comics
  # calibreweb_comics_media:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_comics


x-service-disable: &service-disable
  image: alpine:3.9.5
  restart: "no"
  entrypoint: "true"
  command: "exit 0"


# NOTE : yaml do not support array merge, so we cannot factorize volume declaration here
# https://forums.docker.com/t/is-there-any-way-to-use-extension-fields-in-docker-compose-with-docker-secrets/68602
x-calibreweb: &default-calibreweb
  image: studioetrange/calibre-web:${CALIBRE_WEB_VERSION:-latest}
  depends_on: 
    - service_init
  restart: unless-stopped
  environment:
    - PUID=${MAMBO_USER_ID:-0}
    - PGID=${MAMBO_GROUP_ID:-0}
    - DOCKER_MODS=studioetrange/calibre-mod:${CALIBRE_VERSION:-latest}
  networks:
    - default
  expose:
    - 8083
  build:
    context: https://github.com/linuxserver/docker-calibre-web.git#${CALIBRE_WEB_VERSION}
    args:
      - CALIBREWEB_RELEASE=${CALIBRE_WEB_VERSION}




services:

  # Launch all services
  mambo:
    image: bash:4.4.23
    container_name: mambo
    user: ${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    depends_on:
      - ${SERVICE_TRAEFIK}
      - ${SERVICE_OMBI}
      - ${SERVICE_SABNZBD}
      - ${SERVICE_MEDUSA}
      - ${SERVICE_TAUTULLI}
      - ${SERVICE_WEB}
      - ${SERVICE_PLEX}
      - ${SERVICE_ORGANIZR2}
    labels:
      - "mambo.managed=true"
    networks:
      - default
    command: >
      bash -c "echo Hello Mambo."

  # do some init on internal volume
  # Clean internal media volume from useless folders {/media} and
  # create a foo file because when mounting an empty named volume on {/media}, it might get cdrom, floppy, usb... media folders.
  volume_init:
    image: bash:4.4.23
    container_name: mambo_volume_init
    # need root to delete default {/media} subfolders
    user: root
    volumes:
      - media:/media
    networks:
      - default
    command: >
      bash -c "rm -Rf /media/cdrom && rm -Rf /media/usb && rm -Rf /media/floppy && touch /media/.mambo"  
      
  # init service
  # check if mandatory path are specified and create subfolder if needed
  service_init:
    image: bash:4.4.23
    container_name: mambo_service_init
    user: ${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    depends_on:
      - volume_init
    volumes:
      - data:/data
      - media:/media
      - download:/download
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    env_file:
      - ./.env
    labels:
      - "mambo.managed=true"
    networks:
      - default
    command: >
        bash -c " echo ---------==---- MAMBO PATH ----==---------
        && echo Format : [host path] {inside container path}
        && echo Data path : [$MAMBO_DATA_PATH] is mapped to {/data}
        && echo Download path : [$MAMBO_DOWNLOAD_PATH] is mapped to {/download}
        && echo Media folders : [$MAMBO_MEDIA_FOLDERS] are mapped to {/media} subfolders
        && echo Plex transcode folder : [$PLEX_TRANSCODE_PATH]  {/transcode}
        && echo Common scripts folder : [$MAMBO_DATA_PATH/scripts] {/data/scripts}
        && mkdir -p /data/scripts
        && echo Lets encrypt store file : [$MAMBO_DATA_PATH/letsencrypt/acme.json] {/data/letsencrypt/acme.json}
        && mkdir -p /data/letsencrypt
        && touch /data/letsencrypt/acme.json
        && chmod 600 /data/letsencrypt/acme.json
        && echo Vault folder for downloads [$MAMBO_DOWNLOAD_PATH/vault] {/download/vault}
        && mkdir -p /download/vault
        && echo generic web folder \(including newsletter,...\) [$MAMBO_DATA_PATH/web] {/data/web}
        && mkdir -p /data/web
        && mkdir -p /data/web/newsletter
        && echo ---------==---- MAMBO SERVICES ----==---------
        && for service in $$(compgen -A variable | grep SERVICE_); do
            service_status=$${service}
            service=$${service/SERVICE_/}
            version=$${service}_VERSION
            version=$${!version}
            case $${!service_status} in
              *_disable) 
                echo \"* $${service}\"
                echo \"L-- status : DISABLED\"
                ;;
              * ) 
                echo \"* $${service}\"
                echo \"L-- status : ENABLED\"
                ;;
            esac
            echo \"L-- version : $${version}\"
            __var=\"$${service}_ENTRYPOINTS\"; __entrypoints=\"$${!__var}\"; __var=\"$${service}_ENTRYPOINTS_SECURE\"; __entrypoints=\"$${__entrypoints} $${!__var}\";
            echo \"L-- entrypoints : $${__entrypoints}\"
            echo -n \"L-- redirect HTTP to HTTPS : \"
            __redirected=
            for s in $${MAMBO_SERVICES_REDIRECT_HTTPS}; do
              [ \"$${service,,}\" = \"$$s\" ] && __redirected=1
            done
            [ \"$${__redirected}\" = \"1\" ] && echo YES || echo NO
            __direct_access=\"$${service}_DIRECT_ACCESS_PORT\"; __direct_access=\"$${!__direct_access}\";
            echo \"L-- direct access port : $${__direct_access}\"
            case $${service} in
              ORGANIZR2 )
                echo L-- create {/data/organizr2} [$MAMBO_DATA_PATH/organizr2]
                mkdir -p /data/organizr2
                ;;
              PLEX )
                mkdir -p '/data/plex'
                # plex image have a bug and create Library/Application Support owner is root instead of PLEX_UID when launching the docker image 
                # so we create Library/Application Support with right owner from here
                mkdir -p '/data/plex/Library/Application Support'       
                ;;
            esac
            __urls=
            
            for e in $${__entrypoints}; do
              e=\"$${e/web_/MAMBO_PORT_}\"
              e=\"$${e^^}\"
              __with_s=
              case $$e in
              *SECURE )__with_s=\"s\";; 
              esac
              __urls=\" $${__urls} http$${__with_s}://$${service,,}.$${MAMBO_DOMAIN/\.\*/\*}:$${!e}\"
            done
            echo L-- URLs : $${__urls}
            echo L-- variables list :
            for variables in $$(compgen -A variable | grep ^$${service}_); do
              case $${variables} in
                *PASSWORD* )echo \"  + $${variables}=*****\";;
                * )echo \"  + $${variables}=$${!variables}\";;
              esac
            done
          done \
        && echo ---------==---- LETS ENCRYPT ----==---------
        && echo -n \"L-- status : \"
        && case $${LETS_ENCRYPT} in
        enable )echo ENABLED;;
        debug )echo ENABLED with DEBUG lets encrypt server;;
        * ) echo DISABLED;;
        esac
        && echo \"L-- email used : $LETS_ENCRYPT_MAIL\"
        && echo \"L-- certificates generated for : $LETS_ENCRYPT_SERVICES\"
        && echo \"L-- challenge method : $LETS_ENCRYPT_CHALLENGE\"
        && echo ---------==---- MAMBO NETWORK ----==---------
        && echo \"* IP & Domain\"
        && echo L-- Mambo declared domain : \"$MAMBO_DOMAIN\"
        && echo L-- Mambo external IP : $MAMBO_EXTERNAL_IP
        && echo L-- Mambo host name : $MAMBO_HOSTNAME
        && echo L-- Mambo host default local IP : $MAMBO_HOST_DEFAULT_IP
        && echo L-- Mambo host local IPs : $MAMBO_HOST_IP
        && echo \"* MAIN AREA\"
        && echo L-- services : $MAMBO_SERVICES_AREA_MAIN
        && echo L-- HTTP entrypoint [web_main] - port : $MAMBO_PORT_MAIN reachable from internet : $$([ \"$${MAMBO_PORT_MAIN_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo L-- HTTPS entrypoint [web_main_secure] - port : $MAMBO_PORT_MAIN_SECURE reachable from internet : $$([ \"$${MAMBO_PORT_MAIN_SECURE_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo \"* SECONDARY AREA\"
        && echo L-- services : $MAMBO_SERVICES_AREA_SECONDARY
        && echo L-- HTTP entrypoint [web_secondary] - port : $MAMBO_PORT_SECONDARY reachable from internet : $$([ \"$${MAMBO_PORT_SECONDARY_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo L-- HTTPS entrypoint [web_secondary_secure] - port : $MAMBO_PORT_SECONDARY_SECURE reachable from internet : $$([ \"$${MAMBO_PORT_SECONDARY_SECURE_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo \"* ADMIN AREA\"
        && echo L-- services : $MAMBO_SERVICES_AREA_ADMIN
        && echo L-- HTTP entrypoint [web_admin] - port : $MAMBO_PORT_ADMIN reachable from internet : $$([ \"$${MAMBO_PORT_ADMIN_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo L-- HTTPS entrypoint [web_admin_secure] - port : $MAMBO_PORT_ADMIN_SECURE reachable from internet : $$([ \"$${MAMBO_PORT_ADMIN_SECURE_REACHABLE}\" = \"1\" ] && echo YES || echo unknown)
        && echo"


  # Router
  # traefik launch order do not matter. It can be launched before or after all other services
  # ENTRYPOINT web_main
  #     http://domain:${MAMBO_PORT_MAIN}  
  # ENTRYPOINT web_secondary
  #     http://domain:${MAMBO_PORT_SECONDARY}
  # ENTRYPOINT web_admin
  #     http://traefik.domain:${MAMBO_PORT_ADMIN}          => go to dashboard
  #     http://traefik.domain:${MAMBO_PORT_ADMIN}/api
  #     http://traefik.domain:${MAMBO_PORT_ADMIN}/dashboard
  traefik:
    image: traefik:${TRAEFIK_VERSION:-latest}
    container_name: mambo_traefik
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- ./traefik-conf.yml:/etc/traefik/traefik.yml
      - letsencrypt:/letsencrypt
    env_file:
      - ./.env
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      # http://traefik.domain:${MAMBO_PORT_ADMIN} http://traefik.domain:${MAMBO_PORT_ADMIN}/api http://traefik.domain:${MAMBO_PORT_ADMIN}/dashboard
      - "traefik.http.routers.traefik.entrypoints=${TRAEFIK_ENTRYPOINTS:-web_admin_secure}"
      # With traefik dashboard enabled, the router rule must catch requests for both /api and /dashboard
      - "traefik.http.routers.traefik.rule=HostRegexp(`{subdomain:traefik}.{domain:${MAMBO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.priority=${TRAEFIK_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.traefik.middlewares=traefik-api-redirect,traefik-api-redirect2"
      - "traefik.http.routers.traefik-secure.entrypoints=${TRAEFIK_ENTRYPOINTS:-web_admin_secure}"
      - "traefik.http.routers.traefik-secure.rule=HostRegexp(`{subdomain:traefik}.{domain:${MAMBO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-api-redirect,traefik-api-redirect2"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=traefik.${MAMBO_DOMAIN:-.*}"
      # redirect /dashboard to /dashboard/
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.regex=^(http[s]?://[^:/]+(:[0-9]+)?)/dashboard$$"
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.replacement=$${1}/dashboard/"
      # redirect / to /dashboard/
      - "traefik.http.middlewares.traefik-api-redirect2.redirectregex.regex=^(http[s]?://[^:/]+(:[0-9]+)?)(/)+$$"
      - "traefik.http.middlewares.traefik-api-redirect2.redirectregex.replacement=$${1}/dashboard/"
      # HTTP to HTTPS redirect routers - catch all HTTP request on each entrypoint
      # NOTE : we cannot use the method of set redirect middleware on each routers service because each service routers
      #        may have two entrypoints and middlewares dont know from which entrypoint the request come.
      #        So we use a global catch all rule, using priority for exclude some services
      - "traefik.http.routers.http-catchall-web_admin.entrypoints=web_admin"
      - "traefik.http.routers.http-catchall-web_admin.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall-web_admin.priority=100"
      - "traefik.http.routers.http-catchall-web_admin.middlewares=redirect-secure-web_admin@docker"
      - "traefik.http.routers.http-catchall-web_secondary.entrypoints=web_secondary"
      - "traefik.http.routers.http-catchall-web_secondary.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall-web_secondary.priority=100"
      - "traefik.http.routers.http-catchall-web_secondary.middlewares=redirect-secure-web_secondary@docker"
      - "traefik.http.routers.http-catchall-web_main.entrypoints=web_main"
      - "traefik.http.routers.http-catchall-web_main.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall-web_main.priority=100"
      - "traefik.http.routers.http-catchall-web_main.middlewares=redirect-secure-web_main@docker"
      # HTTP to HTTPS redirect middleware
      - "traefik.http.middlewares.redirect-secure-web_main.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-secure-web_main.redirectscheme.permanent=true"
      - "traefik.http.middlewares.redirect-secure-web_main.redirectscheme.port=${MAMBO_PORT_MAIN_SECURE}"
      - "traefik.http.middlewares.redirect-secure-web_secondary.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-secure-web_secondary.redirectscheme.permanent=true"
      - "traefik.http.middlewares.redirect-secure-web_secondary.redirectscheme.port=${MAMBO_PORT_SECONDARY_SECURE}"
      - "traefik.http.middlewares.redirect-secure-web_admin.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-secure-web_admin.redirectscheme.permanent=true"
      - "traefik.http.middlewares.redirect-secure-web_admin.redirectscheme.port=${MAMBO_PORT_ADMIN_SECURE}"
    networks:
      - default
    expose:
      # web_admin entrypoints
      - 9000
      - 9443
      # web_secondary entrypoints
      - 8000
      - 8443
      # web_main entrypoints
      - 80
      - 443
    ports:
      - ${MAMBO_PORT_MAIN}:80
      - ${MAMBO_PORT_MAIN_SECURE}:443
      - ${MAMBO_PORT_SECONDARY}:8000
      - ${MAMBO_PORT_SECONDARY_SECURE}:8443
      - ${MAMBO_PORT_ADMIN}:9000
      - ${MAMBO_PORT_ADMIN_SECURE}:9443
    command:
      # https://docs.traefik.io/reference/static-configuration/cli/
      - "--log=true"
      - "--log.level=DEBUG"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--api.insecure=false"
      - "--entrypoints.web_main=true"
      - "--entrypoints.web_main.address=:80" 
      - "--entrypoints.web_main_secure=true"
      - "--entrypoints.web_main_secure.address=:443"
      - "--entrypoints.web_secondary=true"
      - "--entrypoints.web_secondary.address=:8000"
      - "--entrypoints.web_secondary_secure=true"
      - "--entrypoints.web_secondary_secure.address=:8443"
      - "--entrypoints.web_admin=true"
      - "--entrypoints.web_admin.address=:9000"
      - "--entrypoints.web_admin_secure=true"
      - "--entrypoints.web_admin_secure.address=:9443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.constraints=Label(`mambo.managed`,`true`)"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.mambo=true"
      - "--certificatesresolvers.mambo.acme.email=${LETS_ENCRYPT_MAIL}"
      - "--certificatesresolvers.mambo.acme.storage=/letsencrypt/acme.json"
  traefik_disable:
    << : *service-disable  


  # Main mambo portal
  # ENTRYPOINT web_secondary
  #   http://medusa.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  organizr2:
    image: organizrtools/organizr-v2:${ORGANIZR2_VERSION:-latest}
    container_name: mambo_organizr2
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      # will contain organizr2 configuration
      - organizr2_data:/config
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.organizr2.entrypoints=${OMBI_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.organizr2.rule=HostRegexp(`{subdomain:organizr2}.{domain:${MAMBO_DOMAIN:-.*}}`)"      
      - "traefik.http.routers.organizr2.service=organizr2"
      - "traefik.http.routers.organizr2.priority=${OMBI_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.organizr2-secure.entrypoints=${OMBI_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.organizr2-secure.rule=HostRegexp(`{subdomain:organizr2}.{domain:${MAMBO_DOMAIN:-.*}}`)"      
      - "traefik.http.routers.organizr2-secure.service=organizr2"
      - "traefik.http.routers.organizr2-secure.tls=true"
      - "traefik.http.routers.organizr2-secure.tls.domains[0].main=organizr2.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.organizr2.loadbalancer.server.port=80"
      - "traefik.http.services.organizr2.loadbalancer.server.scheme=http"
      - "traefik.http.services.organizr2.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 80
  organizr2_disable:
    << : *service-disable


  # Manage movie/tv show request
  # ENTRYPOINT web_secondary
  #   http[s]://ombi.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  #   http[s]://domain:${MAMBO_PORT_SECONDARY}/ombi [SUBPATH] [KO] Try --baseurl option at ombi launch to support subpath 
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  ombi:
    image: studioetrange/docker-ombi:${OMBI_VERSION:-latest}
    container_name: mambo_ombi
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      # data/ombi will contain ombi configuration
      - data:/data
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.entrypoints=${OMBI_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.ombi.rule=HostRegexp(`{subdomain:ombi}.{domain:${MAMBO_DOMAIN:-.*}}`)"      
      - "traefik.http.routers.ombi.service=ombi"
      - "traefik.http.routers.ombi.priority=${OMBI_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.ombi-secure.entrypoints=${OMBI_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.ombi-secure.rule=HostRegexp(`{subdomain:ombi}.{domain:${MAMBO_DOMAIN:-.*}}`)"      
      - "traefik.http.routers.ombi-secure.service=ombi"
      - "traefik.http.routers.ombi-secure.tls=true"
      - "traefik.http.routers.ombi-secure.tls.domains[0].main=ombi.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.ombi.loadbalancer.server.port=5000"
      - "traefik.http.services.ombi.loadbalancer.server.scheme=http"
      - "traefik.http.services.ombi.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 5000
    build:
      context: https://github.com/StudioEtrange/docker-ombi.git#:ver/${OMBI_VERSION:-latest}
  # fake empty service
  ombi_disable:
    << : *service-disable

  # Newzgroup downloader
  # ENTRYPOINT web_secondary
  #   http://sabnzbd.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  #   http://domain:${MAMBO_PORT_SECONDARY}/sabnzbd [SUBPATH]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  sabnzbd:
    image: studioetrange/docker-sabnzbd:${SABNZBD_VERSION:-latest}
    container_name: mambo_sabnzbd
    depends_on:
      - service_init
    restart: unless-stopped
    volumes:
      # data/sabnzbd will contain sabnzbd configuration
      - data:/data
      # different paths used by sabnzbd
      - download:/download
      - vault:/vault
      - scripts:/scripts
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
      - 'HOST_WHITELIST_ENTRIES=sabnzbd,sabnzbd.${MAMBO_DOMAIN},${MAMBO_HOSTNAME},${MAMBO_HOSTNAME}.${MAMBO_DOMAIN},${SABNZBD_ADDITIONAL_DOMAIN}'
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.entrypoints=${SABNZBD_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.sabnzbd.rule=HostRegexp(`{subdomain:sabnzbd}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/sabnzbd`)"
      - "traefik.http.routers.sabnzbd.priority=${SABNZBD_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.routers.sabnzbd-secure.entrypoints=${SABNZBD_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.sabnzbd-secure.rule=HostRegexp(`{subdomain:sabnzbd}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/sabnzbd`)"
      - "traefik.http.routers.sabnzbd-secure.service=sabnzbd"
      - "traefik.http.routers.sabnzbd-secure.tls=true"
      - "traefik.http.routers.sabnzbd-secure.tls.domains[0].main=sabnzbd.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      - "traefik.http.services.sabnzbd.loadbalancer.server.scheme=http"
      - "traefik.http.services.sabnzbd.loadbalancer.passhostheader=true"
      - "traefik.http.middlewares.sabnzbd-stripprefix.stripprefix.prefixes=/sabnzbd, /sabnzbd/"
      - "traefik.http.routers.sabnzbd.middlewares=sabnzbd-stripprefix"
      - "traefik.http.routers.sabnzbd-secure.middlewares=sabnzbd-stripprefix"
    networks:
      - default
    expose:
      - 8080
      # HTTPS port
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-sabnzbd.git#:ver/${SABNZBD_VERSION:-latest}
  # fake empty service
  sabnzbd_disable:
    << : *service-disable

  # Media server
  # https://github.com/plexinc/pms-docker
  # https://hub.docker.com/r/plexinc/pms-docker
  # ENTRYPOINT web_main
  #   http://plex.domain:${MAMBO_PORT_MAIN} [SUBDOMAIN]
  # ENTRYPOINT web_secondary
  #   http://plex.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  plex:
    image: plexinc/pms-docker:${PLEX_VERSION:-latest}
    container_name: mambo_plex
    # add a DNS entry to the existing 'plex' entry only inside this container
    # the default plex server name is defined by the hostname
    hostname: mambo
    depends_on:
      - service_init
    restart: unless-stopped
    volumes:
      # will contain plex configuration
      - plex_data:/config
      - media:/media
      - ${PLEX_TRANSCODE_PATH}:/transcode
    environment:
      - PLEX_UID=${MAMBO_USER_ID:-0}
      - PLEX_GID=${MAMBO_GROUP_ID:-0}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      # if server have already be claimed, PLEX_CLAIM env var is ignored
      - PLEX_CLAIM=${PLEX_CLAIM:-}
      - 'ADVERTISE_IP=http://${MAMBO_HOSTNAME}:${PLEX_DIRECT_ACCESS_PORT}/,https://${MAMBO_HOSTNAME}:${PLEX_DIRECT_ACCESS_PORT}/,http://plex:${MAMBO_PORT_MAIN}/,https://plex:${MAMBO_PORT_MAIN_SECURE}/,http://plex:${MAMBO_PORT_SECONDARY}/,https://plex:${MAMBO_PORT_SECONDARY_SECURE}/,http://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_MAIN}/,https://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_MAIN_SECURE}/,http://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_SECONDARY}/,https://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_SECONDARY_SECURE}/,http://${MAMBO_HOSTNAME}.${MAMBO_DOMAIN}:${MAMBO_PORT_MAIN}/,https://${MAMBO_HOSTNAME}.${MAMBO_DOMAIN}:${MAMBO_PORT_MAIN_SECURE}/,http://${MAMBO_HOSTNAME}.${MAMBO_DOMAIN}:${MAMBO_PORT_SECONDARY}/,https://${MAMBO_HOSTNAME}.${MAMBO_DOMAIN}:${MAMBO_PORT_SECONDARY_SECURE}/,${PLEX_ADDITIONAL_DOMAIN}'
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.plex.entrypoints=${PLEX_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.plex.rule=HostRegexp(`{subdomain:plex}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.plex.priority=${PLEX_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.plex.service=plex"
      - "traefik.http.routers.plex-secure.entrypoints=${PLEX_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.plex-secure.rule=HostRegexp(`{subdomain:plex}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.plex-secure.service=plex"
      - "traefik.http.routers.plex-secure.tls=true"
      - "traefik.http.routers.plex-secure.tls.domains[0].main=plex.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.services.plex.loadbalancer.server.scheme=http"
      - "traefik.http.services.plex.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 32400/tcp
      - 3005/tcp
      - 8324/tcp
      - 32469/tcp
      - 1900/udp
      - 32410/udp
      - 32412/udp
      - 32413/udp
      - 32414/udp
  # fake empty service
  plex_disable:
    << : *service-disable


  # Tv show download manager
  # ENTRYPOINT web_secondary
  #   http://medusa.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  medusa:
    image: studioetrange/docker-medusa:${MEDUSA_VERSION:-latest}
    container_name: mambo_medusa
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      # data/medusa will contain medusa configuration
      - data:/data
      # different paths used by medusa
      - download:/download
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.medusa.entrypoints=${MEDUSA_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.medusa.rule=HostRegexp(`{subdomain:medusa}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.medusa.priority=${MEDUSA_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.medusa.service=medusa"
      - "traefik.http.routers.medusa-secure.entrypoints=${MEDUSA_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.medusa-secure.rule=HostRegexp(`{subdomain:medusa}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.medusa-secure.service=medusa"
      - "traefik.http.routers.medusa-secure.tls=true"
      - "traefik.http.routers.medusa-secure.tls.domains[0].main=medusa.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.medusa.loadbalancer.server.port=8081"
      - "traefik.http.services.medusa.loadbalancer.server.scheme=http"
      - "traefik.http.services.medusa.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-medusa.git#:ver/${MEDUSA_VERSION:-latest}
  # fake empty service
  medusa_disable:
    << : *service-disable

  # Plex statistics and management tools
  # ENTRYPOINT web_secondary
  #   http://tautulli.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  tautulli:
    image: studioetrange/docker-tautulli:${TAUTULLI_VERSION:-latest}
    container_name: mambo_tautulli
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      # data/tautulli will contain tautulli configuration
      - data:/data
      # newsletter_data will be used for generated newsletter
      - newsletter_data:/newsletter
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.entrypoints=${TAUTULLI_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.tautulli.rule=HostRegexp(`{subdomain:tautulli}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.tautulli.priority=${TAUTULLI_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.tautulli.service=tautulli"
      - "traefik.http.routers.tautulli-secure.entrypoints=${TAUTULLI_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.tautulli-secure.rule=HostRegexp(`{subdomain:tautulli}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.tautulli-secure.service=tautulli"
      - "traefik.http.routers.tautulli-secure.tls=true"
      - "traefik.http.routers.tautulli-secure.tls.domains[0].main=tautulli.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
      - "traefik.http.services.tautulli.loadbalancer.server.scheme=http"
      - "traefik.http.services.tautulli.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8181
    build:
      context: https://github.com/StudioEtrange/docker-tautulli.git#:ver/${TAUTULLI_VERSION:-latest}
  tautulli_disable:
    << : *service-disable
  
  web:
    image: httpd:${WEB_VERSION:-latest}
    container_name: mambo_web
    depends_on: 
      - service_init
    restart: unless-stopped
    volumes:
      - web_data:/usr/local/apache2/htdocs
    labels:
      - "mambo.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.web.entrypoints=${WEB_ENTRYPOINTS:-web_main}"
      - "traefik.http.routers.web.rule=HostRegexp(`{subdomain:web}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.web.priority=${WEB_REDIRECT_HTTPS_PRIORITY:-200}"
      - "traefik.http.routers.web.service=web"
      - "traefik.http.routers.web-secure.entrypoints=${WEB_ENTRYPOINTS_SECURE:-web_main_secure}"
      - "traefik.http.routers.web-secure.rule=HostRegexp(`{subdomain:web}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.web-secure.service=web"
      - "traefik.http.routers.web-secure.tls=true"
      - "traefik.http.routers.web-secure.tls.domains[0].main=web.${MAMBO_DOMAIN:-.*}"
      - "traefik.http.services.web.loadbalancer.server.port=80"
      - "traefik.http.services.web.loadbalancer.server.scheme=http"
      - "traefik.http.services.web.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 80
  web_disable:
    << : *service-disable



  # calibreweb_books:
  #   << : *default-calibreweb
  #   container_name: mambo_calibreweb_books
  #   volumes:
  #     # will contain calibre-web configuration
  #     - calibreweb_books_data:/config
  #     # different paths used by calibreweb
  #     - calibreweb_books_media:/books
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibreweb_books.entrypoints=web_secondary"
  #     - "traefik.http.routers.calibreweb_books.rule=HostRegexp(`{subdomain:calibreweb_books}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_books`)"
  #     - "traefik.http.routers.calibreweb_books.service=calibreweb_books"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.server.port=8083"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.server.scheme=http"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.passhostheader=true"
  #     - "traefik.http.routers.calibreweb_books.middlewares=calibreweb_books-stripprefix"
  #     - "traefik.http.middlewares.calibreweb_books-stripprefix.stripprefix.prefixes=/calibreweb_books, /calibreweb_books/"

  # calibreweb_comics:
  #   << : *default-calibreweb
  #   container_name: mambo_calibreweb_comics
  #   volumes:
  #     # will contain calibre-web configuration
  #     - calibreweb_comics_data:/config
  #     # different paths used by calibreweb
  #     - calibreweb_comics_media:/books
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibreweb_comics.entrypoints=web_secondary"
  #     - "traefik.http.routers.calibreweb_comics.rule=HostRegexp(`{subdomain:calibreweb_comics}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_comics`)"
  #     - "traefik.http.routers.calibreweb_comics.service=calibreweb_comics"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.server.port=8083"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.server.scheme=http"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.passhostheader=true"
  #     - "traefik.http.routers.calibreweb_comics.middlewares=calibreweb_comics-stripprefix"
  #     - "traefik.http.middlewares.calibreweb_comics-stripprefix.stripprefix.prefixes=/calibreweb_comics, /calibreweb_comics/"
