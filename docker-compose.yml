version: '2.4'

networks:
  default:

volumes:
  media:
  data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}
  download:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}
  scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/scripts
  vault:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}/vault
  organizr2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/organizr2
  plex_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/plex
  # calibreweb_books_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_DATA_PATH}/calibreweb_books
  # calibreweb_books_media:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_books
  # calibreweb_comics_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_DATA_PATH}/calibreweb_comics
  # calibreweb_comics_media:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_comics


x-service-disable: &service-disable
  image: alpine:3.9.5
  restart: "no"
  entrypoint: "true"
  command: "exit 0"


# NOTE : yaml do not support array merge, so we cannot factorize volume declaration here
# https://forums.docker.com/t/is-there-any-way-to-use-extension-fields-in-docker-compose-with-docker-secrets/68602
x-calibreweb: &default-calibreweb
  image: studioetrange/calibre-web:${CALIBRE_WEB_VERSION:-latest}
  depends_on: 
    - service_init
  restart: always
  environment:
    - PUID=${MAMBO_USER_ID:-0}
    - PGID=${MAMBO_GROUP_ID:-0}
    - DOCKER_MODS=studioetrange/calibre-mod:${CALIBRE_VERSION:-latest}
  networks:
    - default
  expose:
    - 8083
  build:
    context: https://github.com/linuxserver/docker-calibre-web.git#${CALIBRE_WEB_VERSION}
    args:
      - CALIBREWEB_RELEASE=${CALIBRE_WEB_VERSION}




services:

  # Launch all services
  mambo:
    image: bash:4.4.23
    container_name: mambo
    user: ${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    restart: always
    depends_on:
      - traefik
      - ${SERVICE_OMBI}
      - ${SERVICE_SABNZBD}
      - ${SERVICE_MEDUSA}
      - ${SERVICE_TAUTULLI}
      - ${SERVICE_PLEX}
      - ${SERVICE_ORGANIZR2}
    networks:
      - default
    command: >
      bash -c "echo Hello Mambo."

  # do some init on internal volume
  # Clean internal media volume from useless folders {/media} and
  # create a foo file because when mounting an empty named volume on {/media}, it might get cdrom, floppy, usb... media folders.
  volume_init:
    image: bash:4.4.23
    container_name: mambo_volume_init
    # need root to delete default {/media} subfolders
    user: root
    volumes:
      - media:/media
    networks:
      - default
    command: >
      bash -c "rm -Rf /media/cdrom && rm -Rf /media/usb && rm -Rf /media/floppy && touch /media/.mambo"  
      
  # init service
  # check if mandatory path are specified and create subfolder if needed
  service_init:
    image: bash:4.4.23
    container_name: mambo_service_init
    user: ${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    depends_on:
      - volume_init
    volumes:
      - data:/data
      - media:/media
      - download:/download
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    env_file:
      - .env
    networks:
      - default
    command: >
        bash -c "echo Format : {inside path} [outside path]
        && echo DATA PATH : [${MAMBO_DATA_PATH}] is mapped to {/data}
        && echo DOWNLOAD PATH : [${MAMBO_DOWNLOAD_PATH}] is mapped to {/download}
        && echo MEDIA FOLDERS : [${MAMBO_MEDIA_FOLDERS}] are mapped to {/media} subfolders
        && echo Plex transcode folder : [${PLEX_TRANSCODE_PATH}] 
        && echo Create common scripts folder :  {/data/scripts} [${MAMBO_DATA_PATH}/scripts]
        && mkdir -p /data/scripts
        && echo Create vault folder for downloads {/download/scripts} [${MAMBO_DOWNLOAD_PATH}/vault]
        && mkdir -p /download/vault
        && for service in $$(compgen -A variable | grep SERVICE_); do
          case $${!service} in
            *_disable) echo $${service} is DISABLED;;
            * ) 
            echo $${service} is ENABLED
            case $${service} in
            SERVICE_ORGANIZR2 )
            echo Create {/data/organizr2} [${MAMBO_DATA_PATH}/organizr2]
            mkdir -p /data/organizr2
            ;;
            SERVICE_PLEX )
            echo Create {/data/plex} [${MAMBO_DATA_PATH}/plex]
            # plex image have a bug and create Library/Application Support as root instead of PLEX_UID
            mkdir -p '/data/plex/Library/Application Support'
            ;;
            #SERVICE_CALIBRE* )
            #echo Create {/media/${MAMBO_MEDIA_CALIBREDB_FOLDER}/$${!service}} [${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/$${!service}]
            #mkdir -p /media/${MAMBO_MEDIA_CALIBREDB_FOLDER}/$${!service}
            #;;
            esac
            ;;
          esac
          done \
        && echo END"


  # Router
  # traefik launch order do not matter. It can be launched before or after all other services
  # ENTRYPOINT web_main
  #     http://domain:${MAMBO_PORT_MAIN}       
  #     http://neon.domain                      
  # ENTRYPOINT web_secondary
  #     http://domain:${MAMBO_PORT_SECONDARY}
  #     http://neon.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # ENTRYPOINT web_traefik_admin
  #     http://traefik.domain:${MAMBO_PORT_TRAEFIK_ADMIN}          => go to dashboard
  #     http://traefik.domain:${MAMBO_PORT_TRAEFIK_ADMIN}/api
  #     http://traefik.domain:${MAMBO_PORT_TRAEFIK_ADMIN}/dashboard
  traefik:
    image: traefik:v2.1.4
    container_name: mambo_traefik
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-conf.yml:/etc/traefik/traefik.yml
      - ./traefik-services.yml:/etc/traefik/services.yml
    labels:
      - "traefik.enable=true"
      # http://domain:${MAMBO_PORT_TRAEFIK_ADMIN} http://domain:${MAMBO_PORT_TRAEFIK_ADMIN}/api http://domain:${MAMBO_PORT_TRAEFIK_ADMIN}/dashboard
      - "traefik.http.routers.traefik-api2.entrypoints=web_traefik_admin"
      # With traefik dashboard enabled, the router rule must catch requests for both /api and /dashboard
      - "traefik.http.routers.traefik-api2.rule=HostRegexp(`{subdomain:traefik}.{domain:${MAMBO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik-api2.service=api@internal"
      - "traefik.http.routers.traefik-api2.middlewares=traefik-api-redirect,traefik-api-redirect2"
      # redirect /dashboard to /dashboard/
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.regex=^(http://[^:/]+(:[0-9]+)?)/dashboard$$"
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.replacement=$${1}/dashboard/"
      # redirect / to /dashboard/
      - "traefik.http.middlewares.traefik-api-redirect2.redirectregex.regex=^(http://[^:/]+(:[0-9]+)?)(/)+$$"
      - "traefik.http.middlewares.traefik-api-redirect2.redirectregex.replacement=$${1}/dashboard/"
      # http://neon.domain
      # http://neon.domain:${MAMBO_PORT_SECONDARY}
      - "traefik.http.routers.neon.entrypoints=web_main,web_secondary"
      - "traefik.http.routers.neon.rule=HostRegexp(`{subdomain:neon}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.neon.service=neon@file"
    networks:
      - default
    expose:
      # web_traefik_admin entrypoint
      - 9000
      # web_secondary entrypoint
      - 8000
      # web_main entrypoint
      - 80
      # web_ssl entrypoint
      #- 443
    ports:
      - ${MAMBO_PORT_MAIN}:80
      - 443:443
      - ${MAMBO_PORT_SECONDARY}:8000
      - ${MAMBO_PORT_TRAEFIK_ADMIN}:9000


  # Main mambo portal
  # ENTRYPOINT web_secondary
  #   http://medusa.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  organizr2:
    image: organizrtools/organizr-v2:${ORGANIZR2_VERSION:-latest}
    container_name: mambo_organizr2
    depends_on: 
      - service_init
    restart: always
    volumes:
      # will contain organizr2 configuration
      - organizr2_data:/config
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    networks:
      - default
    expose:
      - 80
  organizr2_disable:
    << : *service-disable


  # Manage movie/tv show request
  # ENTRYPOINT web_secondary
  #   http://ombi.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  #   http://domain:${MAMBO_PORT_SECONDARY}/ombi [SUBPATH] [KO] Try --baseurl option at ombi launch to support subpath 
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  ombi:
    image: studioetrange/docker-ombi:${OMBI_VERSION:-latest}
    container_name: mambo_ombi
    depends_on: 
      - service_init
    restart: always
    volumes:
      # data/ombi will contain ombi configuration
      - data:/data
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.entrypoints=web_secondary"
      - "traefik.http.routers.ombi.rule=HostRegexp(`{subdomain:ombi}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.ombi.service=ombi"
      - "traefik.http.services.ombi.loadbalancer.server.port=5000"
      - "traefik.http.services.ombi.loadbalancer.server.scheme=http"
      - "traefik.http.services.ombi.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 5000
    build:
      context: https://github.com/StudioEtrange/docker-ombi.git#:ver/${OMBI_VERSION:-latest}
  # fake empty service
  ombi_disable:
    << : *service-disable

  # Newzgroup downloader
  # ENTRYPOINT web_secondary
  #   http://sabnzbd.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  #   http://domain:${MAMBO_PORT_SECONDARY}/sabnzbd [SUBPATH]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  sabnzbd:
    image: studioetrange/docker-sabnzbd:${SABNZBD_VERSION:-latest}
    container_name: mambo_sabnzbd
    depends_on:
      - service_init
    restart: always
    volumes:
      # data/sabnzbd will contain sabnzbd configuration
      - data:/data
      # different paths used by sabnzbd
      - download:/download
      - vault:/vault
      - scripts:/scripts
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
      - 'HOST_WHITELIST_ENTRIES=sabnzbd,sabnzbd.${MAMBO_DOMAIN},${ADDITIONAL_DOMAIN_SABNZBD}'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.entrypoints=web_secondary"
      - "traefik.http.routers.sabnzbd.rule=HostRegexp(`{subdomain:sabnzbd}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/sabnzbd`)"
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      - "traefik.http.services.sabnzbd.loadbalancer.server.scheme=http"
      - "traefik.http.services.sabnzbd.loadbalancer.passhostheader=true"
      - "traefik.http.routers.sabnzbd.middlewares=sabnzbd-stripprefix"
      - "traefik.http.middlewares.sabnzbd-stripprefix.stripprefix.prefixes=/sabnzbd, /sabnzbd/"
    networks:
      - default
    expose:
      - 8080
      # HTTPS port
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-sabnzbd.git#:ver/${SABNZBD_VERSION:-latest}
  # fake empty service
  sabnzbd_disable:
    << : *service-disable

  # Media server
  # https://github.com/plexinc/pms-docker
  # https://hub.docker.com/r/plexinc/pms-docker
  # ENTRYPOINT web_main
  #   http://plex.domain:${MAMBO_PORT_MAIN} [SUBDOMAIN]
  # ENTRYPOINT web_secondary
  #   http://plex.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  plex:
    image: plexinc/pms-docker:${PLEX_VERSION:-latest}
    container_name: mambo_plex
    # will be the default plex name - add a DNS entry to the existing 'plex' entry only inside this container
    hostname: mambo
    depends_on:
      - service_init
    restart: always
    volumes:
      # will contain plex configuration
      - plex_data:/config
      - media:/media
      - ${PLEX_TRANSCODE_PATH}:/transcode
    environment:
      - PLEX_UID=${MAMBO_USER_ID:-0}
      - PLEX_GID=${MAMBO_GROUP_ID:-0}
      - CHANGE_CONFIG_DIR_OWNERSHIP=true
      # if server have already be claimed, PLEX_CLAIM env var is ignored
      - PLEX_CLAIM=${PLEX_CLAIM:-}
      - 'ADVERTISE_IP=http://plex:${DIRECT_ACCESS_PORT_PLEX}/,http://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_MAIN}/,http://plex.${MAMBO_DOMAIN}:${MAMBO_PORT_SECONDARY}/,${ADDITIONAL_DOMAIN_PLEX}'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.entrypoints=web_main,web_secondary"
      - "traefik.http.routers.plex.rule=HostRegexp(`{subdomain:plex}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.plex.service=plex"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.services.plex.loadbalancer.server.scheme=http"
      - "traefik.http.services.plex.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 32400/tcp
      - 3005/tcp
      - 8324/tcp
      - 32469/tcp
      - 1900/udp
      - 32410/udp
      - 32412/udp
      - 32413/udp
      - 32414/udp
  # fake empty service
  plex_disable:
    << : *service-disable


  # Tv show download manager
  # ENTRYPOINT web_secondary
  #   http://medusa.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  medusa:
    image: studioetrange/docker-medusa:${MEDUSA_VERSION:-latest}
    container_name: mambo_medusa
    depends_on: 
      - service_init
    restart: always
    volumes:
      # data/medusa will contain medusa configuration
      - data:/data
      # different paths used by medusa
      - download:/download
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.medusa.entrypoints=web_secondary"
      - "traefik.http.routers.medusa.rule=HostRegexp(`{subdomain:medusa}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.medusa.service=medusa"
      - "traefik.http.services.medusa.loadbalancer.server.port=8081"
      - "traefik.http.services.medusa.loadbalancer.server.scheme=http"
      - "traefik.http.services.medusa.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-medusa.git#:ver/${MEDUSA_VERSION:-latest}
  # fake empty service
  medusa_disable:
    << : *service-disable

  # Plex statistics and management tools
  # ENTRYPOINT web_secondary
  #   http://tautulli.domain:${MAMBO_PORT_SECONDARY} [SUBDOMAIN]
  # DIRECT ACCESS
  #   http://host:{DIRECT_ACCESS_PORT}
  tautulli:
    image: studioetrange/docker-tautulli:${TAUTULLI_VERSION:-latest}
    container_name: mambo_tautulli
    depends_on: 
      - service_init
    restart: always
    volumes:
      # data/tautulli will contain tautulli configuration
      - data:/data
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.entrypoints=web_secondary"
      - "traefik.http.routers.tautulli.rule=HostRegexp(`{subdomain:tautulli}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.tautulli.service=tautulli"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
      - "traefik.http.services.tautulli.loadbalancer.server.scheme=http"
      - "traefik.http.services.tautulli.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8181
    build:
      context: https://github.com/StudioEtrange/docker-tautulli.git#:ver/${TAUTULLI_VERSION:-latest}
  tautulli_disable:
    << : *service-disable



  # calibreweb_books:
  #   << : *default-calibreweb
  #   container_name: mambo_calibreweb_books
  #   volumes:
  #     # will contain calibre-web configuration
  #     - calibreweb_books_data:/config
  #     # different paths used by calibreweb
  #     - calibreweb_books_media:/books
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibreweb_books.entrypoints=web_secondary"
  #     - "traefik.http.routers.calibreweb_books.rule=HostRegexp(`{subdomain:calibreweb_books}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_books`)"
  #     - "traefik.http.routers.calibreweb_books.service=calibreweb_books"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.server.port=8083"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.server.scheme=http"
  #     - "traefik.http.services.calibreweb_books.loadbalancer.passhostheader=true"
  #     - "traefik.http.routers.calibreweb_books.middlewares=calibreweb_books-stripprefix"
  #     - "traefik.http.middlewares.calibreweb_books-stripprefix.stripprefix.prefixes=/calibreweb_books, /calibreweb_books/"

  # calibreweb_comics:
  #   << : *default-calibreweb
  #   container_name: mambo_calibreweb_comics
  #   volumes:
  #     # will contain calibre-web configuration
  #     - calibreweb_comics_data:/config
  #     # different paths used by calibreweb
  #     - calibreweb_comics_media:/books
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibreweb_comics.entrypoints=web_secondary"
  #     - "traefik.http.routers.calibreweb_comics.rule=HostRegexp(`{subdomain:calibreweb_comics}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_comics`)"
  #     - "traefik.http.routers.calibreweb_comics.service=calibreweb_comics"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.server.port=8083"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.server.scheme=http"
  #     - "traefik.http.services.calibreweb_comics.loadbalancer.passhostheader=true"
  #     - "traefik.http.routers.calibreweb_comics.middlewares=calibreweb_comics-stripprefix"
  #     - "traefik.http.middlewares.calibreweb_comics-stripprefix.stripprefix.prefixes=/calibreweb_comics, /calibreweb_comics/"
