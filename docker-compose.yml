
# TODO CONTINUE HERE : logspout:fluentd dont want to build
# docker-compose up logspout

# Launch all 
#   docker-compose up mambo
# Launch one specific service
#   docker-compose up -d ombi
# Clean mambo
#   docker-compose down -v
# Build a service
#   docker-compose build ombi



# NOTES
# if you use bind mount as volumes define MAMBO_USER_ID and MAMBO_GROUP_ID which will defines the unix permissions off volumes files and folders
#   MAMBO_USER_ID=$(id -u) MAMBO_GROUP_ID=$(id -g) docker-compose up
# if you want to specify a specific domain name use MAMBO_DOMAIN
#   MAMBO_DOMAIN='.*' docker-compose up

# traefik launch order do not matter. It can be launched before or after all other services

# mambo network
#   there is two endpoints 'web' and 'web_internal'
#   'web' entrypoint is the main port to access to mambo - It is an entrypoint of traefik that allow access to organizr. You should allow its attached port to anybody in your router configuration.
#   'web_internal' entrypoint is an internal port for mambo - It is an entrypoint of traefik that allow access to each services (so its bypass organizr) AND to traefik dashboard. You should protect its attached port in your router configuration according to your needs.
# NOTE : to manage iptables rule we can use this https://github.com/colinmollenhour/docker-confd-firewall


# LINKS
# MEDIA STACK on DOCKER with TRAEFIK
# https://gist.github.com/anonymous/66ff223656174fd39c76d6075d6535fd
# TRAEFIK GUIDES
# https://medium.com/@containeroo/traefik-2-0-docker-an-advanced-guide-d098b9e9be96
# https://blog.eleven-labs.com/fr/utiliser-traefik-comme-reverse-proxy/
# ORGANIZR2 and NGINX
# translate this nginx to traefik: https://guydavis.github.io/2019/01/03/nginx_organizr_v2/





version: '3.4'

networks:
  default:

  public:
    external: true


volumes:
  data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}
  media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_MEDIA_PATH}
  download:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}
  scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/scripts
  vault:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DOWNLOAD_PATH}/vault
  organizr2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/organizr2
  calibreweb_books_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/calibreweb_books
  calibreweb_books_media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_books
  calibreweb_comics_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_DATA_PATH}/calibreweb_comics
  calibreweb_comics_media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MAMBO_MEDIA_PATH}/${MAMBO_MEDIA_CALIBREDB_FOLDER}/calibreweb_comics

    
x-service-disable: &service-disable
  image: alpine:3.9.5
  restart: "no"
  entrypoint: "true"
  command: "exit 0"


# NOTE : yaml do not support array merge, so we cannot factorize volume declaration here
# https://forums.docker.com/t/is-there-any-way-to-use-extension-fields-in-docker-compose-with-docker-secrets/68602
x-calibreweb: &default-calibreweb
  image: studioetrange/calibre-web:${CALIBRE_WEB_VERSION:-latest}
  depends_on: 
    - service_init
  restart: always
  environment:
    - PUID=${MAMBO_USER_ID:-0}
    - PGID=${MAMBO_GROUP_ID:-0}
    - DOCKER_MODS=studioetrange/calibre-mod:${CALIBRE_VERSION:-latest}
  networks:
    - default
  expose:
    - 8083
  build:
    context: https://github.com/linuxserver/docker-calibre-web.git#${CALIBRE_WEB_VERSION}
    args:
      - CALIBREWEB_RELEASE=${CALIBRE_WEB_VERSION}




services:

  # Launch all services
  # RLog aggregator and print them to stdout with fluent-bit
  mambo:
    image: fluent/fluent-bit:1.3.6
    container_name: mambo
    depends_on:
      - logspout
      - traefik
      - ${SERVICE_OMBI}
      - ${SERVICE_SABNZBD}
      - ${SERVICE_MEDUSA}
    expose:
      - 24224
    command: >
        /fluent-bit/bin/fluent-bit -i forward://0.0.0.0:24224 -o stdout


  
  # init service
  # check if mandatory path are specified and create subfolder if needed
  service_init:
    image: bash:4.4.23
    container_name: mambo_service_init
    user: ${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    volumes:
      - data:/data
      - media:/media
      - download:/download
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.log=true"
    env_file: ./.env
    command: >
        bash -c "echo DATA PATH : $${MAMBO_DATA_PATH} is mapped to /data
        && echo MEDIA PATH : $${MAMBO_MEDIA_PATH} is mapped to /media
        && echo DOWNLOAD PATH : $${MAMBO_DOWNLOAD_PATH} is mapped to /download
        && echo Create if not exists media folders [$${MAMBO_MEDIA_FOLDERS}]
        && for f in $${MAMBO_MEDIA_FOLDERS}; do mkdir -p /media/$${f}; done
        && echo Create if not exists common scripts folder [$${MAMBO_DATA_PATH}/scripts]
        && mkdir -p /data/scripts
        && echo Create if not exists vault folder for downloads [$${MAMBO_DOWNLOAD_PATH}/vault]
        && mkdir -p /download/vault
        && for service in $$(compgen -A variable | grep SERVICE_); do
          case $${!service} in
            *_disable) echo $${service} is DISABLED;;
            * ) 
            echo $${service} is ENABLED
            case $${service} in
            SERVICE_CALIBRE* )
            echo Create [$${MAMBO_MEDIA_PATH}/$${MAMBO_MEDIA_CALIBREDB_FOLDER}/$${!service}]
            mkdir -p /media/$${MAMBO_MEDIA_CALIBREDB_FOLDER}/$${!service}
            ;;
            esac
            ;;
          esac
          done \
        && echo END
        "



  # Router
  # http://traefik.domain:${MAMBO_PORT_INTERNAL}
  # http://traefik.domain:${MAMBO_PORT_INTERNAL}/api
  # http://traefik.domain:${MAMBO_PORT_INTERNAL}/dashboard

  # http://neon.domain
  # http://neon.domain:${MAMBO_PORT_INTERNAL}
  traefik:
    image: traefik:v2.1.2
    container_name: mambo_traefik
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-conf.yml:/etc/traefik/traefik.yml
      - ./traefik-services.yml:/etc/traefik/services.yml
    labels:
      - "traefik.enable=true"

      # http://traefik.domain:${MAMBO_PORT_INTERNAL}/dashboard http://traefik.domain:${MAMBO_PORT_INTERNAL}/api
      - "traefik.http.routers.traefik-api.entrypoints=web_internal"
      - "traefik.http.routers.traefik-api.rule=HostRegexp(`{subdomain:traefik}.{domain:${MAMBO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) )"
      # With traefik dashboard enabled, the router rule must catch requests for both /api and /dashboard
      - "traefik.http.routers.traefik-api.service=api@internal"
      - "traefik.http.routers.traefik-api.middlewares=traefik-api-redirect"
      # redirect /dashboard to /dashboard/
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.regex=^(http://[^:/]+(:[0-9]+)?)/dashboard$$"
      - "traefik.http.middlewares.traefik-api-redirect.redirectregex.replacement=$${1}/dashboard/"
      
      # http://neon.domain
      # http://neon.domain:${MAMBO_PORT_INTERNAL}
      - "traefik.http.routers.neon.entrypoints=web,web_internal"
      - "traefik.http.routers.neon.rule=HostRegexp(`{subdomain:neon}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.neon.service=neon@file"
    networks:
      - default
    expose:
      # web entrypoint
      - 80
      # do we need this entrypoint ?
      - 443
      # web internal entrypoint
      - 8000
    ports:
      - ${MAMBO_PORT_MAIN}:80
      - 443:443
      - ${MAMBO_PORT_INTERNAL}:8000

  # Docker log collector
  # logspout : https://github.com/gliderlabs/logspout
  # logspout to fluentd/fluent-bit : https://github.com/StudioEtrange/logspout-fluentd
  # logs are forwarded to mambo container which is based on fluent-bit
  # logs can also be requested with 
  #       mambo_logspout mambo_logspout:24223/logs # TODO : change this to route with traefik on web_internal
  logspout:
    image: studioetrange/logspout-fluentd:${LOGSPOUT_VERSION}
    container_name: mambo_logspout
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    environment:
      - TAG_PREFIX=docker
      - TAG_SUFFIX_LABEL="mambo"
      - LOGSPOUT="ignore"
      - FLUENTD_ASYNC_CONNECT="true"
      - PORT=24223
    ports:
      - 24223:24223
    networks: 
      - default
    command: >
      ./logspout fluentd://mambo:24224?filter.labels=mambo.log:true
    build:
      context: https://github.com/StudioEtrange/logspout-fluentd.git
      args:
        - LOGSPOUT_VERSION=${LOGSPOUT_VERSION:-master}

  # Main mambo portal
  organizr2:
    image: organizrtools/organizr-v2:dev-latest
    container_name: mambo_organizr2
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # will contain organizr2 configuration
      - organizr2_data:/config
    environment:
      - PUID=${MAMBO_USER_ID:-0}
      - PGID=${MAMBO_GROUP_ID:-0}
    networks:
      - default
    expose:
      - 80
    ports:
      - 8070:80



  # Manage movie/tv show request
  # http://ombi.domain:${MAMBO_PORT_INTERNAL}
  # do not work within a subpath http://domain:${MAMBO_PORT_INTERNAL}/ombi
  ombi:
    image: studioetrange/docker-ombi:${OMBI_VERSION:-latest}
    container_name: mambo_ombi
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # data/ombi will contain ombi configuration
      - data:/data
      - scripts:/scripts
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.entrypoints=web_internal"
      - "traefik.http.routers.ombi.rule=HostRegexp(`{subdomain:ombi}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.ombi.service=ombi"
      - "traefik.http.services.ombi.loadbalancer.server.port=5000"
      - "traefik.http.services.ombi.loadbalancer.server.scheme=http"
      - "traefik.http.services.ombi.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 5000
    build:
      context: https://github.com/StudioEtrange/docker-ombi.git#:ver/${OMBI_VERSION:-latest}
  # fake empty service
  ombi_disable:
    << : *service-disable

  # Newzgroup downloader
  # http://sabnzbd.domain:${MAMBO_PORT_INTERNAL}
  # http://domain:${MAMBO_PORT_INTERNAL}/sabnzbd
  sabnzbd:
    image: studioetrange/docker-sabnzbd:${SABNZBD_VERSION:-latest}
    container_name: mambo_sabnzbd
    depends_on:
      - service_init
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # data/sabnzbd will contain sabnzbd configuration
      - data:/data
      # different paths used by sabnzbd
      - download:/download
      - vault:/vault
      - scripts:/scripts
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
      - HOST_WHITELIST_ENTRIES=sabnzbd, sabnzbd.${MAMBO_DOMAIN}, ${MAMBO_DOMAIN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.entrypoints=web_internal"
      - "traefik.http.routers.sabnzbd.rule=HostRegexp(`{subdomain:sabnzbd}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/sabnzbd`)"
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      - "traefik.http.services.sabnzbd.loadbalancer.server.scheme=http"
      - "traefik.http.services.sabnzbd.loadbalancer.passhostheader=true"
      - "traefik.http.routers.sabnzbd.middlewares=sabnzbd-stripprefix"
      - "traefik.http.middlewares.sabnzbd-stripprefix.stripprefix.prefixes=/sabnzbd, /sabnzbd/"
    networks:
      - default
    expose:
      - 8080
      # HTTPS port
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-sabnzbd.git#:ver/${SABNZBD_VERSION:-latest}
  # fake empty service
  sabnzbd_disable:
    << : *service-disable

  # Tv show download manager
  # http://medusa.domain:${MAMBO_PORT_INTERNAL}
  # http://domain:${MAMBO_PORT_INTERNAL}/medusa
  medusa:
    image: studioetrange/docker-medusa:${MEDUSA_VERSION:-latest}
    container_name: mambo_medusa
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # data/medusa will contain medusa configuration
      - data:/data
      # different paths used by medusa
      - download:/download
      - media:/media
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "mambo.log=true"
      - "traefik.enable=true"
      - "traefik.http.routers.medusa.entrypoints=web_internal"
      - "traefik.http.routers.medusa.rule=HostRegexp(`{subdomain:medusa}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.medusa.service=medusa"
      - "traefik.http.services.medusa.loadbalancer.server.port=8081"
      - "traefik.http.services.medusa.loadbalancer.server.scheme=http"
      - "traefik.http.services.medusa.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8081
    build:
      context: https://github.com/StudioEtrange/docker-medusa.git#:ver/${MEDUSA_VERSION:-latest}
  # fake empty service
  medusa_disable:
    << : *service-disable

  # Plex statistics and management tools
  # http://tautulli.domain:${MAMBO_PORT_INTERNAL}
  tautulli:
    image: studioetrange/docker-tautulli:${TAUTULLI_VERSION:-latest}
    container_name: mambo_tautulli
    depends_on: 
      - service_init
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # data/tautulli will contain tautulli configuration
      - data:/data
    environment:
      - SERVICE_USER=${MAMBO_USER_ID:-0}:${MAMBO_GROUP_ID:-0}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.entrypoints=web_internal"
      - "traefik.http.routers.tautulli.rule=HostRegexp(`{subdomain:tautulli}.{domain:${MAMBO_DOMAIN:-.*}}`)"
      - "traefik.http.routers.tautulli.service=tautulli"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
      - "traefik.http.services.tautulli.loadbalancer.server.scheme=http"
      - "traefik.http.services.tautulli.loadbalancer.passhostheader=true"
    networks:
      - default
    expose:
      - 8181
    build:
      context: https://github.com/StudioEtrange/docker-tautulli.git#:ver/${TAUTULLI_VERSION:-latest}




  calibreweb_books:
    << : *default-calibreweb
    container_name: mambo_calibreweb_books
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # will contain calibre-web configuration
      - calibreweb_books_data:/config
      # different paths used by calibreweb
      - calibreweb_books_media:/books
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibreweb_books.entrypoints=web_internal"
      - "traefik.http.routers.calibreweb_books.rule=HostRegexp(`{subdomain:calibreweb_books}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_books`)"
      - "traefik.http.routers.calibreweb_books.service=calibreweb_books"
      - "traefik.http.services.calibreweb_books.loadbalancer.server.port=8083"
      - "traefik.http.services.calibreweb_books.loadbalancer.server.scheme=http"
      - "traefik.http.services.calibreweb_books.loadbalancer.passhostheader=true"
      - "traefik.http.routers.calibreweb_books.middlewares=calibreweb_books-stripprefix"
      - "traefik.http.middlewares.calibreweb_books-stripprefix.stripprefix.prefixes=/calibreweb_books, /calibreweb_books/"

  calibreweb_comics:
    << : *default-calibreweb
    container_name: mambo_calibreweb_comics
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # will contain calibre-web configuration
      - calibreweb_comics_data:/config
      # different paths used by calibreweb
      - calibreweb_comics_media:/books
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibreweb_comics.entrypoints=web_internal"
      - "traefik.http.routers.calibreweb_comics.rule=HostRegexp(`{subdomain:calibreweb_comics}.{domain:${MAMBO_DOMAIN:-.*}}`) || HostRegexp(`{domain:${MAMBO_DOMAIN:-.*}}`) && PathPrefix(`/calibreweb_comics`)"
      - "traefik.http.routers.calibreweb_comics.service=calibreweb_comics"
      - "traefik.http.services.calibreweb_comics.loadbalancer.server.port=8083"
      - "traefik.http.services.calibreweb_comics.loadbalancer.server.scheme=http"
      - "traefik.http.services.calibreweb_comics.loadbalancer.passhostheader=true"
      - "traefik.http.routers.calibreweb_comics.middlewares=calibreweb_comics-stripprefix"
      - "traefik.http.middlewares.calibreweb_comics-stripprefix.stripprefix.prefixes=/calibreweb_comics, /calibreweb_comics/"
