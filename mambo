#!/bin/bash
_CURRENT_FILE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_CURRENT_RUNNING_DIR="$( cd "$( dirname "." )" && pwd )"



# INIT TANGO -------------------
# TANGO lookup order
#       1. externaly defined TANGO_ROOT     ==> instance mode : isolated or shared
#       2. "${_CURRENT_FILE_DIR}/../tango"  ==> instance mode : isolated or shared
#       3. "mambo/tango"                    ==> instance mode : isolated only. shared instance is not compatible with this location
INTERNAL_TANGO_ROOT="${_CURRENT_FILE_DIR}/tango"
INSTANCE_MODE_SHARED_OK=
if [ "${TANGO_ROOT}" = "" ]; then
    if [ -d "${_CURRENT_FILE_DIR}/../tango" ]; then
        TANGO_ROOT="${_CURRENT_FILE_DIR}/../tango"
        INSTANCE_MODE_SHARED_OK=1
    else
        # use internal tango
        TANGO_ROOT="${INTERNAL_TANGO_ROOT}"
    fi
else
    TANGO_ROOT="$(cd "${TANGO_ROOT}" && pwd -P)"
    [ ! "${TANGO_ROOT}" = "${INTERNAL_TANGO_ROOT}" ] && INSTANCE_MODE_SHARED_OK=1
fi

if [ ! -d "${TANGO_ROOT}" ]; then
    echo "* ERROR tango not found, by default it is first lookup into ${_CURRENT_FILE_DIR}/../tango OR defined its path with TANGO_ROOT"
    exit 1
fi

STELLA_LOG_STATE="OFF"
. "${_CURRENT_FILE_DIR}/stella-link.sh" include

. "${TANGO_ROOT}/src/tango-init.sh" $@






# SET ARG ------------------------
# set command line
. "${TANGO_ROOT}/src/tango-set-arg.sh" $@












# PARSE ARG ------------------------
PARAMETERS="
ACTION=										'action' 			a				'init update info shell exec up down status install logs restart services modules scripts plugins cert letsencrypt auth' '1'
TARGET=										'target' 			s				''	'0'
ARGUMENT=									'argument' 			s				''	'0'
"

OPTIONS="$OPTIONS
CLAIM=''				    ''				''					b			0		''			  will force to claim plex server even it is already registred.
"


usage() {
	echo "USAGE :"
	echo "----------------"
	echo "o-- commands :"
	echo "L     install : deploy this app."
	echo "L     init plex [--claim] : init plex service. Do it at least once before launch for plex. - will stop plex --claim : will force to claim server even it is already registred"
	echo "L     init [sabnzbd|medusa|nzbtomedia|transmission|organizr2|airdcppweb] : init all or one services. Will stop service if running and configure some default settings without modifying other settings."
    echo "L     up [service [-b]] [--module module] [--plugin plugin] [--freeport]: launch all available services or one service"
	echo "L     down [service] [--mods mod-name] [--all]: down all services or one service. Except shared internal service when in shared mode (--all force stop shared service)."
	echo "L     restart [service] [--module module] [--plugin plugin] [--freeport]: restart all services or one service. (same action than up & down)"
	echo "L     info [plex|sabnzbd|medusa|tautulli|overseerr|airdcppweb|vpn_<id>] [--freeport] [-v] : give info. Will generate conf files and print configuration used when launching any service."
	echo "L     status [service] : see service status."
	echo "L     logs [service] [-f] : see service logs."
	echo "L     update <service> : get last version of docker image service. Will stop service if it was running."
	echo "L     shell <service> [--userroot] : launch a shell into a running service. Can be launched as root user instead of setted user."
    echo "L     exec <service> [--userroot] -- command : exec a command into a running service. Can be launched as root user instead of setted user."
	echo "L     services|modules|plugins|scripts list : list available modules or plugins. A module is a predefined service. A plugin is plug onto a service."
	echo "L     plugins exec-service <service>|exec <plugin> : exec all plugin attached to a service OR exec a plugin into all serviced attached."
	echo "L     scripts exec <script> : exec a script."
	echo "o-- various commands :"
	echo "L		cert <path> --domain=<domain> : generate self signed certificate for a domain into a current host folder."
    echo "L		letsencrypt rm : delete generated letsencrypt cert [WARN : delete certs will regenerate request to letsencrypt. Too much requests and you may be banned for a time]"
	echo "L		letsencrypt logs : follow letsencrypt actions"
    echo "L		auth sync : sync authorization information between organizr2 and traefik."
    echo "L		auth enable|disable : temporary enable|disable organizr2 until next up/down. To be permanent use ORGANIZR2_AUTHORIZATION variable"
}

# parse command line
. "${TANGO_ROOT}/src/tango-parse-arg.sh" --app mambo --approot "${_CURRENT_FILE_DIR}" $@









# SET CONTEXT ------------------------
# default mambo env file is mambo.env in HOME
[ "${ENV}" = "" ] && [ -f "${HOME}/mambo.env" ] && ENV="${HOME}/mambo.env"

__action_done_by_mambo=""

# mambo actions
case ${ACTION} in
    auth )
        __action_done_by_mambo="1"
        case ${TARGET} in
            sync )
                # disable generated files and folder modification, we just want to load var and sync api
                export TANGO_ALTER_GENERATED_FILES="OFF"
            ;;
            disable )
                export TANGO_ALTER_GENERATED_FILES="ON"
                export ORGANIZR2_AUTHORIZATION="OFF"
            ;;
            enable )
                export TANGO_ALTER_GENERATED_FILES="ON"
                export ORGANIZR2_AUTHORIZATION="ON"
            ;;

        esac
    ;;
    info )
        case ${TARGET} in
            plex|sabnzbd|medusa|tautulli|overseerr|airdcppweb )
                __action_done_by_mambo="1"
            ;;
        esac
    ;;
    init )
        __action_done_by_mambo="1"
    ;;
    update )
        case ${TARGET} in
            organizr2 )
                __action_done_by_mambo="1"
            ;;
        esac
    ;;

esac

# init and generate files, variables, folders and everything for the framework to work
. "${TANGO_ROOT}/src/tango-set-context.sh" $@


case ${ACTION} in
    install|cert|letsencrypt|modules|services|vendor )
    ;;
    * )
        # set variables specific to mambo services
        __tango_log "DEBUG" "mambo" "set context : organizr2"
        __organizr2_set_context
        __tango_log "DEBUG" "mambo" "set context : transmission"
        __transmission_set_context
        __tango_log "DEBUG" "mambo" "set context : sabnzbd"
        __sabnzbd_set_context
        __tango_log "DEBUG" "mambo" "set context : airdcppweb"
        __airdcppweb_set_context
        __tango_log "DEBUG" "mambo" "set context : medusa"
        __medusa_set_context
        __tango_log "DEBUG" "mambo" "set context : tautulli"
        __tautulli_set_context
        __tango_log "DEBUG" "mambo" "set context : plex"
        __plex_set_context
        __tango_log "DEBUG" "mambo" "set context : overseerr"
        __overseerr_set_context
        __tango_log "DEBUG" "mambo" "set context : airdcppweb"
        __airdcppweb_set_context
    ;;
esac


if [ "${TANGO_ALTER_GENERATED_FILES}" = "ON" ]; then 
    __update_env_files "ingest mambo specific values set context phase"
    __load_env_vars
fi














# BEFORE ACTION ------------------------
if [ "${TANGO_INSTANCE_MODE}" = "shared" ]; then
    if [ ! "${INSTANCE_MODE_SHARED_OK}" = "1" ]; then
        echo "* ERROR cannot use TANGO from ${TANGO_ROOT} in instance mode ${TANGO_INSTANCE_MODE}"
        exit 1
    fi
fi
. "${TANGO_ROOT}/src/tango-before-action.sh" $@

#[ "${__action_done_by_mambo}" = "" ] && . "${TANGO_ROOT}/src/tango-before-action.sh" $@













# ACTION ------------------------
    
# mambo actions
case ${ACTION} in
    update )
            case ${TARGET} in
                organizr2 )
                    __tango_log "INFO" "mambo" "Update service Organizr2"
                    __organizr2_update
                    __tango_log "WARN" "mambo" "You have to restart ${TARGET} service to run the updated version"
                ;;
            esac
    ;;
    init )
        case ${TARGET} in
            plex )
                __tango_log "INFO" "mambo" "Init service Plex"
                __plex_init
            ;;
            sabnzbd )
                __tango_log "INFO" "mambo" "Init service sabnzbd"
                __sabnzbd_init
            ;;
            airdcppweb )
                __tango_log "INFO" "mambo" "Init service airdcppweb"
                __airdcppweb_init
            ;;
            medusa )
                # we compute this only if we need it because it take times
                export PLEX_AUTH_TOKEN="$(__get_plex_x_plex_auth_token ${PLEX_USER} ${PLEX_PASSWORD})"
                __tango_log "INFO" "mambo" "Init service medusa"
                __medusa_init
            ;;
            nzbtomedia )
                __tango_log "INFO" "mambo" "Init service nzbtomedia"
                __nzbtomedia_init
            ;;
            organizr2 )
                __tango_log "INFO" "mambo" "Init service organizr2 (instance : $ORGANIZR2_INSTANCE)"
                __organizr2_init
            ;;
            transmission )
                __tango_log "INFO" "mambo" "Init service transmission"
                __transmission_init
            ;;
            "" )
                __tango_log "INFO" "mambo" "Init service Plex"
                __plex_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring plex" && exit 1
                __tango_log "INFO" "mambo" "Init service Plex"
                __organizr2_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring organizr2" && exit 1
                __tango_log "INFO" "mambo" "Init service sabnzbd"
                __sabnzbd_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring sabnzbd" && exit 1
                __tango_log "INFO" "mambo" "Init service transmission"
                __transmission_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring transmission" && exit 1
                __tango_log "INFO" "mambo" "Init service airdcppweb"
                __airdcppweb_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring airdcppweb" && exit 1
                __tango_log "INFO" "mambo" "Init service medusa"
                # we compute this only if we need it because it take times
                export PLEX_AUTH_TOKEN="$(__get_plex_x_plex_auth_token ${PLEX_USER} ${PLEX_PASSWORD})"
                __medusa_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring medusa" && exit 1
                __tango_log "INFO" "mambo" "Init service nzbtomedia"
                __nzbtomedia_init
                [ $? -ne 0 ] && __tango_log "ERROR" "mambo" "Error while configuring nzbtomedia" && exit 1
            ;;
            * )
                __tango_log "ERROR" "mambo" "Wrong service name : ${TARGET}" && exit 1
            ;;
        esac
    ;;

    auth )
        case ${TARGET} in
            sync )
                __tango_log "INFO" "mambo" "Sync authorization between traefik and organizr2"
                __organizr2_auth "PRINT"
            ;;
            disable )
                __tango_log "INFO" "mambo" "Temporary disable auth - To be permanent modify ORGANIZR2_AUTHORIZATION variable to OFF"
                __organizr2_scheduler_shutdown
            ;;
            enable )
                __tango_log "INFO" "mambo" "Temporary enable auth - To be permanent modify ORGANIZR2_AUTHORIZATION variable to ON"
                __organizr2_scheduler_set
            ;;
        esac
    ;;
    info )
        case ${TARGET} in
            plex ) 
                echo "---------==---- PLEX ----==---------"
                [ "${PLEX_USER}" = "" ] && echo "** Error missing user -- please set PLEX_USER"
                [ "${PLEX_PASSWORD}" = "" ] && echo "** Error missing password -- please set PLEX_PASSWORD"
                echo "L-- User : ${PLEX_USER}"
                echo "L-- Password : ${PLEX_PASSWORD}"
                __token="$(__get_plex_x_plex_auth_token "${PLEX_USER}" "${PLEX_PASSWORD}")"
                echo "L-- X-Plex-Token : ${__token}"
                echo "L-- Owned servers"
                __print_plex_server_registered "${__token}" "OWN"
                echo "L-- Other known servers"
                __print_plex_server_registered "${__token}" "NON_OWN"
            ;;

            sabnzbd )
                echo "---------==---- SABNZBD ----==---------"
                echo "L-- User : ${SABNZBD_USER}"
                echo "L-- Password : ${SABNZBD_PASSWORD}"
                echo "L-- API KEY : ${SABNZBD_API_KEY}"
                echo "L-- NZB KEY : ${SABNZBD_NZB_KEY}"
            ;;
            tautulli )
                echo "---------==---- TAUTULLI ----==---------"
                echo "L-- API KEY : ${TAUTULLI_API_KEY}"
            ;;
            airdcppweb )
                echo "---------==---- AIRDCPPWEB ----==---------"
                echo "L-- User : ${AIRDCPPWEB_USER}"
                echo "L-- Password : ${AIRDCPPWEB_PASSWORD}"
            ;;
            medusa )
                echo "---------==---- MEDUSA ----==---------"
                echo "L-- User : ${MEDUSA_USER}"
                echo "L-- Password : ${MEDUSA_PASSWORD}"
                echo "L-- API KEY : ${MEDUSA_API_KEY}"
            ;;
            overseerr )
                echo "---------==---- OVERSEERR ----==---------"
                echo "L-- API KEY : ${OVERSEERR_API_KEY}"
            ;;
        esac
    ;;
    install|cert|letsencrypt|modules|services|vendor )
    ;;
    * )
        # manage auto login middleware for transmission
        __transmission_auth
    ;;
esac

# ingest specific mambo values generated in previous phase (ACTION or BEFORE_ACTION)
if [ "${TANGO_ALTER_GENERATED_FILES}" = "ON" ]; then 
    __update_env_files "ingest mambo specific values action phase"
    __load_env_vars
fi

if [ "${__action_done_by_mambo}" = "" ]; then
    # execute requested action
    . "${TANGO_ROOT}/src/tango-action.sh" $@
fi












# AFTER ACTION ------------------------
if [ "${__action_done_by_mambo}" = "" ]; then
    # after action hook
    . "${TANGO_ROOT}/src/tango-after-action.sh" $@

    case ${ACTION} in 
        up|restart )
            case ${TARGET} in
                ""|tango|organizr2 )
                    # organizr2 - manage scheduler task
                    __organizr2_scheduler_set
                    ;;
            esac
        ;;
        down )
            case ${TARGET} in
                ""|tango|organizr2 )
                    # organizr2 - manage scheduler task
                    __organizr2_scheduler_shutdown
                    ;;
            esac
        ;;

        install )
            __tango_log "INFO" "mambo" "Install ansible"
            pip install ansible==2.10.4

            __tango_log "INFO" "mambo" "Install python yq"
            pip install yq==2.11.1
            # rename yq python binary to avoid conflict with yq go tool
            $STELLA_API feature_info miniconda3 MINICONDA
            __tango_log "DEBUG" "mambo" "miniconda3 is in $MINICONDA_FEAT_INSTALL_ROOT"
            mv $MINICONDA_FEAT_INSTALL_ROOT/bin/yq $MINICONDA_FEAT_INSTALL_ROOT/bin/pyyq
        ;;

    esac
fi











# END ------------------------
# clean and last hook
# NOTE must be always executed
. "${TANGO_ROOT}/src/tango-end.sh" $@

